"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_all_1 = require("@dendronhq/common-all");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const engine_test_utils_1 = require("@dendronhq/engine-test-utils");
const mocha_1 = require("mocha");
const vscode = __importStar(require("vscode"));
const InsertNoteIndexCommand_1 = require("../../commands/InsertNoteIndexCommand");
const ExtensionProvider_1 = require("../../ExtensionProvider");
const vsCodeUtils_1 = require("../../vsCodeUtils");
const WSUtils_1 = require("../../WSUtils");
const testUtilsv2_1 = require("../testUtilsv2");
const testUtilsV3_1 = require("../testUtilsV3");
suite("InsertNoteIndex", function () {
    const ctx = (0, testUtilsV3_1.setupBeforeAfter)(this);
    (0, mocha_1.describe)("basic", () => {
        test("basic", (done) => {
            (0, testUtilsV3_1.runLegacyMultiWorkspaceTest)({
                ctx,
                preSetupHook: async ({ wsRoot, vaults }) => {
                    await engine_test_utils_1.ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
                },
                onInit: async ({ engine }) => {
                    const foo = (await engine.getNoteMeta("foo")).data;
                    const cmd = new InsertNoteIndexCommand_1.InsertNoteIndexCommand(ExtensionProvider_1.ExtensionProvider.getExtension());
                    await WSUtils_1.WSUtils.openNote(foo);
                    const editor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditorOrThrow();
                    editor.selection = new vscode.Selection(9, 0, 9, 0);
                    await cmd.execute({});
                    const body = editor.document.getText();
                    (0, testUtilsv2_1.expect)(await common_test_utils_1.AssertUtils.assertInString({
                        body,
                        match: [["## Index", "- [[Ch1|foo.ch1]]"].join("\n")],
                    }));
                    done();
                },
            });
        });
        test("basic with markers", (done) => {
            (0, testUtilsV3_1.runLegacyMultiWorkspaceTest)({
                ctx,
                preSetupHook: async ({ wsRoot, vaults }) => {
                    await engine_test_utils_1.ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
                },
                onInit: async ({ engine }) => {
                    const foo = (await engine.getNoteMeta("foo")).data;
                    const cmd = new InsertNoteIndexCommand_1.InsertNoteIndexCommand(ExtensionProvider_1.ExtensionProvider.getExtension());
                    await WSUtils_1.WSUtils.openNote(foo);
                    const editor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditorOrThrow();
                    editor.selection = new vscode.Selection(9, 0, 9, 0);
                    await cmd.execute({ marker: true });
                    const body = editor.document.getText();
                    (0, testUtilsv2_1.expect)(await common_test_utils_1.AssertUtils.assertInString({
                        body,
                        match: [
                            [
                                "<!-- Autogenerated Index Start -->",
                                "## Index",
                                "- [[Ch1|foo.ch1]]",
                                "<!-- Autogenerated Index End -->",
                            ].join("\n"),
                        ],
                    }));
                    done();
                },
            });
        });
    });
    (0, mocha_1.describe)("non-basic cases", () => {
        test("noXVaultWikiLink: false", (done) => {
            (0, testUtilsV3_1.runLegacyMultiWorkspaceTest)({
                ctx,
                preSetupHook: async ({ wsRoot, vaults }) => {
                    await engine_test_utils_1.ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
                },
                onInit: async ({ wsRoot, engine }) => {
                    engine_test_utils_1.TestConfigUtils.withConfig((config) => {
                        common_all_1.ConfigUtils.setWorkspaceProp(config, "enableXVaultWikiLink", true);
                        return config;
                    }, { wsRoot });
                    const foo = (await engine.getNoteMeta("foo")).data;
                    const cmd = new InsertNoteIndexCommand_1.InsertNoteIndexCommand(ExtensionProvider_1.ExtensionProvider.getExtension());
                    await WSUtils_1.WSUtils.openNote(foo);
                    const editor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditorOrThrow();
                    editor.selection = new vscode.Selection(9, 0, 9, 0);
                    await cmd.execute({});
                    const body = editor.document.getText();
                    (0, testUtilsv2_1.expect)(await common_test_utils_1.AssertUtils.assertInString({
                        body,
                        match: [
                            ["## Index", "- [[Ch1|dendron://vault1/foo.ch1]]"].join("\n"),
                        ],
                    }));
                    done();
                },
            });
        });
        test("insertNoteIndex.marker: true", (done) => {
            (0, testUtilsV3_1.runLegacyMultiWorkspaceTest)({
                ctx,
                preSetupHook: async ({ wsRoot, vaults }) => {
                    await engine_test_utils_1.ENGINE_HOOKS.setupBasic({ wsRoot, vaults });
                },
                onInit: async ({ wsRoot, engine }) => {
                    engine_test_utils_1.TestConfigUtils.withConfig((config) => {
                        common_all_1.ConfigUtils.setCommandsProp(config, "insertNoteIndex", {
                            enableMarker: true,
                        });
                        return config;
                    }, { wsRoot });
                    const foo = (await engine.getNoteMeta("foo")).data;
                    const cmd = new InsertNoteIndexCommand_1.InsertNoteIndexCommand(ExtensionProvider_1.ExtensionProvider.getExtension());
                    await WSUtils_1.WSUtils.openNote(foo);
                    const editor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditorOrThrow();
                    editor.selection = new vscode.Selection(9, 0, 9, 0);
                    await cmd.execute({});
                    const body = editor.document.getText();
                    (0, testUtilsv2_1.expect)(await common_test_utils_1.AssertUtils.assertInString({
                        body,
                        match: [
                            [
                                "<!-- Autogenerated Index Start -->",
                                "## Index",
                                "- [[Ch1|foo.ch1]]",
                                "<!-- Autogenerated Index End -->",
                            ].join("\n"),
                        ],
                    }));
                    done();
                },
            });
        });
    });
    (0, testUtilsV3_1.describeMultiWS)("GIVEN foo tag without parent note tags", {
        preSetupHook: async ({ wsRoot, vaults }) => {
            await common_test_utils_1.NoteTestUtilsV4.createNote({
                vault: vaults[0],
                wsRoot,
                fname: "root",
                body: "this is root",
            });
            await common_test_utils_1.NoteTestUtilsV4.createNote({
                vault: vaults[0],
                wsRoot,
                fname: "tags.foo",
                body: "this is tag foo",
            });
        },
    }, () => {
        test("THEN insert note index add tags as index", async () => {
            const engine = ExtensionProvider_1.ExtensionProvider.getEngine();
            const rootNote = (await engine.getNoteMeta("root")).data;
            await ExtensionProvider_1.ExtensionProvider.getWSUtils().openNote(rootNote);
            const editor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditorOrThrow();
            const cmd = new InsertNoteIndexCommand_1.InsertNoteIndexCommand(ExtensionProvider_1.ExtensionProvider.getExtension());
            editor.selection = new vscode.Selection(9, 0, 9, 0);
            await cmd.execute({});
            const body = editor.document.getText();
            (0, testUtilsv2_1.expect)(await common_test_utils_1.AssertUtils.assertInString({
                body,
                match: [["## Index", "- [[Tags|tags]]"].join("\n")],
            }));
        });
    });
    (0, testUtilsV3_1.describeMultiWS)("GIVEN foo tag with parent note tags", {
        preSetupHook: async ({ wsRoot, vaults }) => {
            await common_test_utils_1.NoteTestUtilsV4.createNote({
                vault: vaults[0],
                wsRoot,
                fname: "root",
                body: "this is root",
            });
            await common_test_utils_1.NoteTestUtilsV4.createNote({
                vault: vaults[0],
                wsRoot,
                fname: "tags",
                body: "this is tag",
            });
            await common_test_utils_1.NoteTestUtilsV4.createNote({
                vault: vaults[0],
                wsRoot,
                fname: "tags.foo",
                body: "this is tag foo",
            });
        },
    }, () => {
        test("THEN insert note index add tags as index", async () => {
            const engine = ExtensionProvider_1.ExtensionProvider.getEngine();
            const rootNote = (await engine.getNoteMeta("root")).data;
            await ExtensionProvider_1.ExtensionProvider.getWSUtils().openNote(rootNote);
            const editor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditorOrThrow();
            const cmd = new InsertNoteIndexCommand_1.InsertNoteIndexCommand(ExtensionProvider_1.ExtensionProvider.getExtension());
            editor.selection = new vscode.Selection(9, 0, 9, 0);
            await cmd.execute({});
            const body = editor.document.getText();
            (0, testUtilsv2_1.expect)(await common_test_utils_1.AssertUtils.assertInString({
                body,
                match: [["## Index", "- [[Tags|tags]]"].join("\n")],
            }));
        });
    });
});
//# sourceMappingURL=InsertNoteIndexCommand.test.js.map