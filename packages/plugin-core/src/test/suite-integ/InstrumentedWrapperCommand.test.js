"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const engine_test_utils_1 = require("@dendronhq/engine-test-utils");
const path_1 = __importDefault(require("path"));
const sinon_1 = __importDefault(require("sinon"));
const vscode = __importStar(require("vscode"));
const InstrumentedWrapperCommand_1 = require("../../commands/InstrumentedWrapperCommand");
const ExtensionProvider_1 = require("../../ExtensionProvider");
const analytics_1 = require("../../utils/analytics");
const vsCodeUtils_1 = require("../../vsCodeUtils");
const testUtilsv2_1 = require("../testUtilsv2");
const testUtilsV3_1 = require("../testUtilsV3");
suite("GIVEN a InstrumentedWrapperCommand", function () {
    (0, testUtilsV3_1.describeMultiWS)("WHEN a Command instance is generated by InstrumentedWrapperCommand.createVSCodeCommand", {
        preSetupHook: engine_test_utils_1.ENGINE_HOOKS.setupBasic,
    }, () => {
        test("THEN the returned command is executable by vscode.commands.executeCommand", async () => {
            const { wsRoot, vaults } = ExtensionProvider_1.ExtensionProvider.getDWorkspace();
            const fooPath = path_1.default.join(wsRoot, vaults[0].fsPath, "foo.md");
            const commandArgs = {
                command: {
                    title: "Test Open Command Wrapper",
                    command: "vscode.open",
                    arguments: [vscode.Uri.file(fooPath)],
                },
                event: "TestEvent",
            };
            const result = InstrumentedWrapperCommand_1.InstrumentedWrapperCommand.createVSCodeCommand(commandArgs);
            await vscode.commands.executeCommand(result.command, ...result.arguments);
            const activeEditor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditor();
            (0, testUtilsv2_1.expect)(activeEditor === null || activeEditor === void 0 ? void 0 : activeEditor.document.fileName).toEqual(fooPath);
        });
    });
    (0, testUtilsV3_1.describeMultiWS)("WHEN a wrapper command is run", {
        preSetupHook: engine_test_utils_1.ENGINE_HOOKS.setupBasic,
    }, () => {
        test("THEN the inner command is executed and a telemetry point is fired", async () => {
            const TEST_EVENT = "TestEvent";
            const analyticsStub = sinon_1.default.stub(analytics_1.AnalyticsUtils, "track");
            const { wsRoot, vaults } = ExtensionProvider_1.ExtensionProvider.getDWorkspace();
            const fooPath = path_1.default.join(wsRoot, vaults[0].fsPath, "foo.md");
            const commandArgs = {
                command: {
                    title: "Test Open Command Wrapper",
                    command: "vscode.open",
                    arguments: [vscode.Uri.file(fooPath)],
                },
                event: TEST_EVENT,
            };
            const cmd = new InstrumentedWrapperCommand_1.InstrumentedWrapperCommand();
            await cmd.run(commandArgs);
            const activeEditor = vsCodeUtils_1.VSCodeUtils.getActiveTextEditor();
            (0, testUtilsv2_1.expect)(activeEditor === null || activeEditor === void 0 ? void 0 : activeEditor.document.fileName).toEqual(fooPath);
            let telemetrySentCount = 0;
            analyticsStub.getCalls().forEach((call) => {
                if (TEST_EVENT === call.firstArg) {
                    telemetrySentCount += 1;
                }
            });
            (0, testUtilsv2_1.expect)(telemetrySentCount).toEqual(1);
            analyticsStub.restore();
        });
    });
});
//# sourceMappingURL=InstrumentedWrapperCommand.test.js.map